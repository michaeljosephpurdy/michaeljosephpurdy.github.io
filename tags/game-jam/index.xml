<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Game-Jam on mikepurdy.dev</title><link>https://mikepurdy.dev/tags/game-jam/</link><description>Recent content in Game-Jam on mikepurdy.dev</description><generator>Hugo 0.139.3</generator><language>en-us</language><managingEditor>michaeljosephpurdy@gmail.com (Mike Purdy)</managingEditor><webMaster>michaeljosephpurdy@gmail.com (Mike Purdy)</webMaster><copyright>Mike Purdy</copyright><lastBuildDate>Mon, 20 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mikepurdy.dev/tags/game-jam/index.xml" rel="self" type="application/rss+xml"/><item><title>Sundog - Devlog - 04</title><link>https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-4/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><author>michaeljosephpurdy@gmail.com (Mike Purdy)</author><guid isPermaLink="true">https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-4/</guid><description>&lt;h2 id="controls">Controls&lt;/h2>
&lt;p>&lt;strong>Mooncat&lt;/strong>&amp;rsquo;s controls are a very important part of the game.
It&amp;rsquo;s a two-button game, the rigth button moves the character right, the left button moves the character left.
These controls are mapped onto the actual controller in an interesting way, where the d-pad/directioal input is &amp;lsquo;move left&amp;rsquo;, and the a/b buttons on the controller are &amp;lsquo;move right&amp;rsquo;.&lt;/p>
&lt;p>I&amp;rsquo;m on vacation, away from my desktop (writing this on my macbook), so I had to do some research to refresh my brain on the full extent of the controls.
I found &lt;a href="https://steamcommunity.com/sharedfiles/filedetails/?id=3334076070">this post&lt;/a> on Steam that describes the control scheme really well:&lt;/p>
&lt;blockquote>
&lt;p>Jump by moving in one direction and then pressing the other button. Hold for longer jump.&lt;/p>
&lt;p>Slam after jumping by pressing the other button again, or pressing both buttons while you are falling. Holding a button (or not holding either) will determine the direction you are launched after a bounce.&lt;/p>
&lt;p>Dash and Run by double tapping a button and hold to run.&lt;/p>
&lt;p>Dash Jump is similar to dashing, but instead of pressing one button twice, you press and hold both buttons on the second tap. This jump works when you slide off platforms and makes it possible to do some extra long jumps.&lt;/p>
&lt;p>Air Spin by double tapping a button in mid-air. If the button is for the direction you are moving in, you will gain a bit of forward momentum. If you hold the button you will run after landing. Using this with a dash jump makes it possible to do five tile long jumps with good timing. If the button is for the opposite direction you are moving in, you do a useless spin.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ll be honest here: replicating its control scheme will result in the most indepth control scheme that I&amp;rsquo;ve ever built, and will likely take me out of my comfort zone a bit.&lt;/p>
&lt;p>Nothing I can&amp;rsquo;t handle.&lt;/p>
&lt;p>However, I&amp;rsquo;m not really sure if I want to just replicate the existing control scheme.&lt;/p>
&lt;h2 id="current-state">Current State&lt;/h2>
&lt;h3 id="basic-movement">Basic movement&lt;/h3>
&lt;p>Basic movement is already in place.&lt;/p>
&lt;p>&lt;code>F6, 6, Y, H, N&lt;/code> and anything to the right of them, are treated as &lt;em>right&lt;/em>, and everything to the left is &lt;em>left&lt;/em>.
&lt;code>up, right&lt;/code> on the arrow keys is also &lt;em>right&lt;/em>, and &lt;code>down, left&lt;/code> are &lt;em>left&lt;/em>.&lt;/p>
&lt;p>This is checked in the &amp;rsquo;easiest&amp;rsquo; way possible: &lt;strong>a very long if/else condition&lt;/strong>.
It sounds silly but any editor with multi-line edit or macro support makes writing this trivial.&lt;/p>
&lt;p>If the left or right side of the keyboard is pressed, its corresponding counter is incremented.
If that side is not pressed, then the counter is reset to 0.&lt;/p>
&lt;h3 id="jumping">Jumping&lt;/h3>
&lt;p>The same left/right counters are checked to initiate a jump.&lt;/p>
&lt;p>If both counters are not 0, use the one that is higher to determine which direction to jump in and jump if the player is on the ground.&lt;/p>
&lt;p>Currently, this is a non-variable height jump.&lt;/p>
&lt;p>The work is done by two systems, one that applies the velocity, and one that locks the players direction.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9893a5">---@param e Jumpable | Velocity | Collidable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">function&lt;/span> &lt;span style="color:#56949f">JumpableToVelocitySystem&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">process&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">e&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">dt&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#797593">not&lt;/span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">perform_single_jump&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">perform_single_jump&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#286983">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.collidable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">on_ground&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">did_single_jump&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#286983">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.velocity&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#797593">-&lt;/span>&lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">jump_height&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9893a5">---@param e Jumpable | DeltaPosition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">function&lt;/span> &lt;span style="color:#56949f">JumpableToDeltaPositionSystem&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">process&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">e&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">dt&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#797593">not&lt;/span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">did_single_jump&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">move_forward&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.delta_position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">elseif&lt;/span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">move_backward&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.delta_position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#797593">-&lt;/span>&lt;span style="color:#ea9d34">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="improvments">Improvments&lt;/h2>
&lt;h3 id="variable-height-jumping">Variable height jumping&lt;/h3>
&lt;p>I think I can get away with using the same keyboard data to build out variable height.&lt;/p>
&lt;p>I can modify &lt;code>JumpableToVelocitySystem&lt;/code> to process a portion of the velocity each frame until it hits a certain threshold.&lt;/p>
&lt;p>Currently the player can jump 4 tiles high.
&lt;img src="static-jump-height.gif" alt="character jumping 4 tiles high">&lt;/p>
&lt;p>A favorite game of mine is &lt;strong>Aban Hawins and the 1000 Spikes&lt;/strong>, a XBox Live Arcade game from early 2010s, which was later released to more platformas under the name of &lt;a href="https://en.wikipedia.org/wiki/1001_Spikes">&lt;strong>Aban Hawkins and the 1001 Spikes&lt;/strong>&lt;/a>.
The game has two discrete jump heights, small and large.
There was a lot of &lt;em>readability&lt;/em> in the level design, so as a player you quickly learned when you needed to perform each of the jumps.
I always liked this, so I think I&amp;rsquo;ll do the same thing here.&lt;/p>
&lt;p>Small jump: 2 tile jump&lt;/p>
&lt;p>Large jump: 4 tile jump&lt;/p>
&lt;p>Aban Hawkins has two separate buttons for these jumps (or down + jump to trigger large jump).&lt;/p>
&lt;p>I don&amp;rsquo;t have the luxury of different buttons for different jumps, so I&amp;rsquo;m thinking&amp;hellip;&lt;/p>
&lt;p>You hold both buttons to charge for a jump.
We&amp;rsquo;ll keep track of how long the player is charging their jump by adding &lt;code>dt&lt;/code> to a variable each frame.
When the player releases the button pressed last, then the jump is executed.&lt;/p>
&lt;p>If you hold for less than a certain threshold, you will execute a small jump.
If you hold for more than a certain threshold, you will execute a large jump.
Maybe if you hold it for longer than a threshold, the jump is cancelled.&lt;/p>
&lt;hr>
&lt;p>Alright, so what&amp;rsquo;s written above is in place now:&lt;/p>
&lt;p>&lt;img src="two-sized-jumps.gif" alt="two-sized-jumps">&lt;/p>
&lt;p>The player has a 2 tile jump and a 4 tile jump, and you hit those jumps depending on how long you hold down the button for.&lt;/p>
&lt;p>I currently have it setup to where if you hold it for a full second the jump is then &amp;lsquo;cancelled&amp;rsquo;.
I don&amp;rsquo;t really know how I feel about this, and I think I may gut it.
The problem with it is that it penalizes players for prepping their jump ahead of time.&lt;/p>
&lt;hr>
&lt;p>Okay, so, yeah, that cancel was a bad idea.
Really didn&amp;rsquo;t feel good at all.
I removed that, and now I think it&amp;rsquo;s setup the way it should be.&lt;/p>
&lt;p>If you&amp;rsquo;re holding down both buttons you will start charging a jump.
If the jump is charged below a certain threshold, you will perform a small jump, otherwise a large jump.&lt;/p>
&lt;p>&lt;img src="two-sized-jumps-no-cancel.gif" alt="no-jump-cancels">&lt;/p>
&lt;hr>
&lt;p>I figured a good way to show the player input is to draw it over the screen.
Blue overlay means right input, red overlay means left.&lt;/p>
&lt;p>&lt;img src="two-sized-jumps-with-overlay.gif" alt="with-overlays">&lt;/p>
&lt;p>This helps explain a bug in place right now:&lt;/p>
&lt;p>If you are running left and you push down on right, you begin charging a jump.
This is good, and expected.&lt;/p>
&lt;p>And if you let go of right, you will trigger a jump.
Also good, and also expected.&lt;/p>
&lt;p>But, what happens when you let go of left?&lt;/p>
&lt;p>&lt;img src="changing-direction-should-not-jump.gif" alt="changing-direction-not-working">&lt;/p>
&lt;p>&lt;strong>You immediately jump to the right!&lt;/strong>&lt;/p>
&lt;p>That&amp;rsquo;s not good.
What I think should happen here is that when you let go of the direction you&amp;rsquo;re going in, you begin moving in the other direction.
If that happens, your jump charge should likely reset.&lt;/p>
&lt;hr>
&lt;p>All fixed up.&lt;/p>
&lt;p>&lt;img src="changing-directions-fixed.gif" alt="changing-direction">&lt;/p>
&lt;p>The &lt;code>Controller&lt;/code> determines if the current input is &lt;code>right_dominant&lt;/code> or &lt;code>left_dominant&lt;/code>, as well as what those values were in the previous frame.
&lt;code>right_dominant&lt;/code> means both buttons are down, but the right one is down &amp;lsquo;more&amp;rsquo;, or for longer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">function&lt;/span> &lt;span style="color:#56949f">ControllerState&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">is_right_dominant&lt;/span>&lt;span style="color:#797593">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">return&lt;/span> &lt;span style="color:#d7827e">self.left&lt;/span> &lt;span style="color:#797593">&amp;gt;&lt;/span> &lt;span style="color:#ea9d34">0&lt;/span> &lt;span style="color:#797593">and&lt;/span> &lt;span style="color:#d7827e">self.right&lt;/span> &lt;span style="color:#797593">&amp;gt;&lt;/span> &lt;span style="color:#d7827e">self.left&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With this info, we can see if they flipped directions like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">function&lt;/span> &lt;span style="color:#56949f">ControllerState&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">flipped_directions&lt;/span>&lt;span style="color:#797593">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">return&lt;/span> &lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.was_right_dominant&lt;/span> &lt;span style="color:#797593">and&lt;/span> &lt;span style="color:#d7827e">self.right&lt;/span> &lt;span style="color:#797593">==&lt;/span> &lt;span style="color:#ea9d34">0&lt;/span>&lt;span style="color:#797593">)&lt;/span> &lt;span style="color:#797593">or&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.was_left_dominant&lt;/span> &lt;span style="color:#797593">and&lt;/span> &lt;span style="color:#d7827e">self.left&lt;/span> &lt;span style="color:#797593">==&lt;/span> &lt;span style="color:#ea9d34">0&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can inspect that in the jump system and reset the charge value accordingly&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">state&lt;/span> &lt;span style="color:#797593">==&lt;/span> &lt;span style="color:#ea9d34">&amp;#39;charging&amp;#39;&lt;/span> &lt;span style="color:#797593">and&lt;/span> &lt;span style="color:#d7827e">self.controller_state&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">flipped_directions&lt;/span>&lt;span style="color:#797593">()&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">state&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">&amp;#39;idle&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">state&lt;/span> &lt;span style="color:#797593">==&lt;/span> &lt;span style="color:#ea9d34">&amp;#39;idle&amp;#39;&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">e.jumpable&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">charge&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="overall-code-changes">Overall code changes&lt;/h2>
&lt;p>When I started working on the jump mechanics today, I had some of this work being done by multiple systems.&lt;/p>
&lt;p>It&amp;rsquo;s always easier to break problems down into smaller pieces.
Sometimes it makes sense for those smaller pieces to live in different functions, or different files.&lt;/p>
&lt;p>Previously, I had the jump-related code in a few systems.
It &lt;em>sort of&lt;/em> made sense to do that.
Code that relates to jumping and mutates &lt;code>delta_position&lt;/code> should go in &lt;code>JumpableToDeltaPositionSystem&lt;/code>.
Same with jumping code that mutates &lt;code>velocity&lt;/code>, a perfect place for that would be the &lt;code>JumpableToVelocitySystem&lt;/code>.
The problem is is when these systems end up &amp;lsquo;prepping&amp;rsquo; fields for downstream systems.&lt;/p>
&lt;p>&lt;code>ControllableToMovableAndJumpableSystem&lt;/code> was handling controller inputs and mutating &lt;code>movable&lt;/code> and &lt;code>jumpable&lt;/code> components of entities.
But those downstream systems don&amp;rsquo;t do anything unless that upstream system sets &lt;code>Jumpable.state&lt;/code> to &lt;code>charging&lt;/code> or &lt;code>jump&lt;/code>.&lt;/p>
&lt;p>&lt;code>ControllableToMovableAndJumpableSystem&lt;/code> has now been split into &lt;code>ControllableToMovableSystem&lt;/code> and &lt;code>ControllableToJumpableSystem&lt;/code>, and the later now has all of the jump related code, so no more &lt;code>JumpableToDeltaPositionSystem&lt;/code> or &lt;code>JumpableToVelocitySystem&lt;/code>.&lt;/p>
&lt;p>I &lt;em>think&lt;/em> that it&amp;rsquo;s better off this way.
In the end, it&amp;rsquo;s working the way I wanted it to, and making the game is what&amp;rsquo;s important.&lt;/p>
&lt;hr>
&lt;p>source: &lt;a href="https://github.com/michaeljosephpurdy/eggplant-jam-25">https://github.com/michaeljosephpurdy/eggplant-jam-25&lt;/a>&lt;/p></description></item><item><title>Sundog - Devlog - 03</title><link>https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-3/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><author>michaeljosephpurdy@gmail.com (Mike Purdy)</author><guid isPermaLink="true">https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-3/</guid><description>&lt;h2 id="camera-stuff">Camera stuff&lt;/h2>
&lt;p>I hooked up the level boundaries to the camera system.
I&amp;rsquo;ve been using the same camera system for the past couple of years.
It works in a fairly straightforward way, and thankfully in pretty game-agnostic, so I&amp;rsquo;m able to lift it from game to game and it &amp;lsquo;just works&amp;rsquo;.&lt;/p>
&lt;p>&lt;img src="camera-limits.gif" alt="camera-moving-within-limits">&lt;/p>
&lt;p>This is the guts of it looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.old_position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">clone&lt;/span>&lt;span style="color:#797593">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span> &lt;span style="color:#797593">+&lt;/span> &lt;span style="color:#d7827e">self.offset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">&amp;gt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.x&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_WIDTH&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.x&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_WIDTH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">elseif&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">&amp;lt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.x&lt;/span> &lt;span style="color:#797593">+&lt;/span> &lt;span style="color:#d7827e">GAME_WIDTH&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">&amp;gt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.y&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_HEIGHT&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.y&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_HEIGHT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">elseif&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">&amp;lt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.y&lt;/span> &lt;span style="color:#797593">+&lt;/span> &lt;span style="color:#d7827e">GAME_HEIGHT&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">lerp&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.old_position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.speed&lt;/span> &lt;span style="color:#797593">*&lt;/span> &lt;span style="color:#d7827e">dt&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">lerp&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.old_position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.speed&lt;/span> &lt;span style="color:#797593">*&lt;/span> &lt;span style="color:#d7827e">dt&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">love.graphics&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">translate&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#797593">-&lt;/span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#797593">-&lt;/span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h4 id="breaking-it-down">Breaking it down&lt;/h4>
&lt;p>First, we clone the position from last frame, since we&amp;rsquo;ll use that to smoothly move to new position&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.old_position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">clone&lt;/span>&lt;span style="color:#797593">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>e&lt;/code> is the entity we are tracking.
We apply an offset to it&amp;rsquo;s position, effectively moving it into the center of the screen.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span> &lt;span style="color:#797593">+&lt;/span> &lt;span style="color:#d7827e">self.offset&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We then check the left and right side of the level, and clamp the camera&amp;rsquo;s &lt;code>x&lt;/code> position.
This is so the camera will not move utside of the level boundaries&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">&amp;gt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.x&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_WIDTH&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.x&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_WIDTH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">elseif&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">&amp;lt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.x&lt;/span> &lt;span style="color:#797593">+&lt;/span> &lt;span style="color:#d7827e">GAME_WIDTH&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We do the same thing for top and bottom of the level&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">&amp;gt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.y&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_HEIGHT&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">bottom_right.y&lt;/span> &lt;span style="color:#797593">-&lt;/span> &lt;span style="color:#d7827e">GAME_HEIGHT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">elseif&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">&amp;lt;=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.y&lt;/span> &lt;span style="color:#797593">+&lt;/span> &lt;span style="color:#d7827e">GAME_HEIGHT&lt;/span> &lt;span style="color:#797593">/&lt;/span> &lt;span style="color:#ea9d34">2&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.level_info&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">top_left.y&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we have our position calculated, we start moving to it, but we don&amp;rsquo;t move directly to it, we use a linear interpolation to move the camera somewhat slowly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">lerp&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.old_position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.speed&lt;/span> &lt;span style="color:#797593">*&lt;/span> &lt;span style="color:#d7827e">dt&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">lerp&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.old_position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">self.speed&lt;/span> &lt;span style="color:#797593">*&lt;/span> &lt;span style="color:#d7827e">dt&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we apply the camera by calling &lt;code>love.graphics.translate&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d7827e">love.graphics&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">translate&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#797593">-&lt;/span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#797593">-&lt;/span>&lt;span style="color:#d7827e">self.position&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Sundog - Devlog - 02</title><link>https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-2/</link><pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate><author>michaeljosephpurdy@gmail.com (Mike Purdy)</author><guid isPermaLink="true">https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-2/</guid><description>&lt;h2 id="the-basics">The Basics&lt;/h2>
&lt;p>&lt;code>Lua&lt;/code> is my weapon of choice for most game development which I end up pairing with &lt;a href="https://lexaloffle.com">pico-8&lt;/a> or &lt;a href="https://love2d.org">love-2d&lt;/a>.
I love how fast and dirty I can be with &lt;code>Lua&lt;/code>, but man does that sometimes the lack of type-safety bites me in the butt.
To remedy this, I try to set myself up for success by getting soe me type-safety via &lt;a href="https://luals.github.io/">lua language server&lt;/a> and it&amp;rsquo;s &lt;a href="https://luals.github.io/wiki/annotations/">annotations&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;m still trying to figure out how I best like working with love-2d.
For a few of my projects I&amp;rsquo;ve used an &lt;a href="https://en.wikipedia.org/wiki/Entity_component_system">Entity Component System&lt;/a> approach via &lt;a href="https://github.com/bakpakin/tiny-ecs/tree/master">tiny-ecs&lt;/a>.
That&amp;rsquo;s what I&amp;rsquo;m using for &lt;strong>Sundog&lt;/strong>.&lt;/p>
&lt;p>This is what I&amp;rsquo;ve got so far:
&lt;img src="basic-setup.gif" alt="basic setup">&lt;/p>
&lt;p>All keys on the right of the keybaord map to &amp;lsquo;right&amp;rsquo; and all on the left map to &amp;rsquo;left&amp;rsquo;.
Jumping works like in &lt;strong>Mooncat&lt;/strong>, where if you&amp;rsquo;re going right and then hit left you will jump.&lt;/p>
&lt;p>It&amp;rsquo;s still very janky but figured I&amp;rsquo;d post what I have here.&lt;/p>
&lt;hr>
&lt;h2 id="level-transitions">Level Transitions&lt;/h2>
&lt;p>I have the level transitions working now.&lt;/p>
&lt;p>Here is what that looks like:
&lt;img src="transition.gif" alt="transition">&lt;/p>
&lt;p>How this works is, in &lt;a href="https://ldtk.io">LDtk&lt;/a> I have &lt;code>PLAYER_SPAWN&lt;/code> entities and &lt;code>LEVEL_EXIT&lt;/code> entities.
&lt;code>LEVEL_EXIT&lt;/code> entities are linked to &lt;code>PLAYER_SPAWN&lt;/code> entities in other levels.&lt;/p>
&lt;p>So, I have &lt;em>Level_0&lt;/em> setup below, which has a &lt;code>PLAYER_SPAWN&lt;/code> entity and a &lt;code>LEVEL_EXIT&lt;/code> entity.&lt;/p>
&lt;h3 id="spawning-the-player">Spawning the player&lt;/h3>
&lt;p>When &lt;code>PLAYER_SPAWN&lt;/code> entities are parsed from LDtk levels, they have a &lt;code>player_spawn&lt;/code> component and a &lt;code>position&lt;/code> component:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#797593">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">player_spawn&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#286983">true&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">vector&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#797593">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is then a &lt;code>PlayerSpawningSystem&lt;/code> that processes all entities with &lt;code>player_spawn&lt;/code> and &lt;code>position&lt;/code> components.
When a player spawn is added to the system, it will:&lt;/p>
&lt;ul>
&lt;li>check if a player is already present
&lt;ul>
&lt;li>if not, make a player entity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>set the player entity &lt;code>position&lt;/code> component to the player spawn &lt;code>position&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#9893a5">---@param e PlayerSpawn | Position&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">function&lt;/span> &lt;span style="color:#56949f">PlayerSpawningSystem&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">onAdd&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">e&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">if&lt;/span> &lt;span style="color:#797593">not&lt;/span> &lt;span style="color:#d7827e">self.player&lt;/span> &lt;span style="color:#286983">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.player&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">self.entity_factory&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">build&lt;/span>&lt;span style="color:#797593">({&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">id&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">&amp;#39;PLAYER&amp;#39;&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#797593">})[&lt;/span>&lt;span style="color:#ea9d34">1&lt;/span>&lt;span style="color:#797593">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.player&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">e.position&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">clone&lt;/span>&lt;span style="color:#797593">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">self.world&lt;/span>&lt;span style="color:#797593">:&lt;/span>&lt;span style="color:#d7827e">addEntity&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">self.player&lt;/span>&lt;span style="color:#797593">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#286983">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="level-exit">Level exit&lt;/h3>
&lt;p>When &lt;code>LEVEL_EXIT&lt;/code> entities are parsed from LDtk, they look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#797593">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">is_level_exit&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#286983">true&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">drawable&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#797593">{&lt;/span> &lt;span style="color:#d7827e">sprite&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">love.graphics&lt;/span>&lt;span style="color:#797593">.&lt;/span>&lt;span style="color:#d7827e">newImage&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#ea9d34">&amp;#39;assets/exit.png&amp;#39;&lt;/span>&lt;span style="color:#797593">)&lt;/span> &lt;span style="color:#797593">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">collidable&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#797593">{&lt;/span> &lt;span style="color:#d7827e">radius&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">16&lt;/span> &lt;span style="color:#797593">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">trigger&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#797593">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">position&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">vector&lt;/span>&lt;span style="color:#797593">(&lt;/span>&lt;span style="color:#d7827e">x&lt;/span>&lt;span style="color:#797593">,&lt;/span> &lt;span style="color:#d7827e">y&lt;/span>&lt;span style="color:#797593">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">linked_level_id&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">&amp;#39;Level_1&amp;#39;&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#797593">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When a collision is processed between the player the following is added to the world:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#575279;background-color:#faf4ed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#797593">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">entity_transition_event&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#797593">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">transition_time&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#ea9d34">1&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">fade_out&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#286983">true&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#d7827e">level_to_load&lt;/span> &lt;span style="color:#797593">=&lt;/span> &lt;span style="color:#d7827e">level_exit.linked_level_id&lt;/span>&lt;span style="color:#797593">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#797593">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#797593">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>ScreenTransitionSystem&lt;/code> processes entities with the &lt;code>entity_transition_event&lt;/code> component.&lt;/p>
&lt;p>It will:&lt;/p>
&lt;ul>
&lt;li>draw a black rectangle on the screen with changing value for alpha
&lt;ul>
&lt;li>alpha value increases for &lt;code>fade_out&lt;/code> events&lt;/li>
&lt;li>alpha value decreases for &lt;code>fade_in&lt;/code> events&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>if &lt;code>level_to_load&lt;/code> is present and &lt;code>fade_out&lt;/code> event is done, it will:
&lt;ul>
&lt;li>clear all entities from the world&lt;/li>
&lt;li>add a &lt;code>load_tile_map&lt;/code> event for the &lt;code>level_to_load&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ScreenTransitionSystem&lt;/code> has a function that runs whenever an entity that it is processing is removed.
It uses this as a hook create the corresponding &lt;code>fade_in&lt;/code> event for the &lt;code>fade_out&lt;/code> event that was removed (when removing all entities)&lt;/p>
&lt;p>There is a system that listens to &lt;code>load_tile_map&lt;/code>, it loads and parses levels from LDtk.
All of the entities in the new level will be added to the system, including the &lt;code>PLAYER_SPAWN&lt;/code> event.
The &lt;code>PlayerSpawningSystem&lt;/code> I talked about before will move the player to position of the new player spawn event.&lt;/p>
&lt;h3 id="putting-it-all-together">Putting it all together&lt;/h3>
&lt;ol>
&lt;li>player collides with &lt;code>is_level_exit&lt;/code>&lt;/li>
&lt;li>a &lt;code>fade_out&lt;/code> screen transition event is created, which contains the &lt;code>level_to_load&lt;/code> from the level exit entity&lt;/li>
&lt;li>the screen starts fading out to black&lt;/li>
&lt;li>when the fade out is complete, all entities are removed the world&lt;/li>
&lt;li>a &lt;code>load_tile_map&lt;/code> event is created, pointing to &lt;code>level_to_load&lt;/code>&lt;/li>
&lt;li>player spawn is added
a. the player that was removed in step 4 is added back into the world
b. player position is updated to player spawn position&lt;/li>
&lt;li>a &lt;code>fade_in&lt;/code> screen transition event is created&lt;/li>
&lt;li>screen starts fading in from black&lt;/li>
&lt;li>when the fade in is complete, the &lt;code>fade_in&lt;/code> even its removed.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Phew.
It seems like a lot going on in a few different places, and I guess it is.
It feels that way when typing it all out.
I think the benefit of ECS is that the code is simple to read since it&amp;rsquo;s all in well defined systems.
I&amp;rsquo;m getting the sneaking suspicion though that this cost-savings will end up costing me in the future, as &lt;em>remembering&lt;/em> the system-to-system interaction is where the complexity really lives within ECS-backed games.&lt;/p>
&lt;hr>
&lt;h3 id="reuse">Reuse&lt;/h3>
&lt;p>A nice thing here is to handle restarts if the player falls out of the level, we can reuse all of the above to get the player to respawn right where they were.&lt;/p>
&lt;p>When levels are loaded from &lt;code>LDtk&lt;/code>, the level&amp;rsquo;s top-left coordinates, along with the level&amp;rsquo;s bottom-right coordinates, are stored.
We check the players position against these boundaries, and if the player is out of bounds we trigger the same screen transition flow, only with the current level id.&lt;/p>
&lt;p>&lt;img src="respawn.gif" alt="respawn">&lt;/p>
&lt;p>source: &lt;a href="https://github.com/michaeljosephpurdy/eggplant-jam-25">https://github.com/michaeljosephpurdy/eggplant-jam-25&lt;/a>&lt;/p></description></item><item><title>Sundog - Devlog - 01</title><link>https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-1/</link><pubDate>Thu, 16 Jan 2025 00:00:00 +0000</pubDate><author>michaeljosephpurdy@gmail.com (Mike Purdy)</author><guid isPermaLink="true">https://mikepurdy.dev/posts/egg-plant-game-jam-25/devlog-1/</guid><description>&lt;p>I love &lt;a href="https://eggplant.show">eggplant podcast&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve been listening to it for a long time, and have spent hours listening to it while running.&lt;/p>
&lt;p>I participate in a lot of game jams, but most of them have been through the internal game jams that myself and some other folks at Amazon put together.&lt;/p>
&lt;p>As I was lurking around the &lt;a href="https://discord.gg/eggplant">eggplant discord&lt;/a> and noticed that the &lt;a href="https://itch.io/jam/eggjam-25">Eggplant Game Jam #25&lt;/a> started a little bit ago.
Running from 10 JAN - 11 FEB, the idea is to take inspiration from a slew of &lt;a href="https://50games.fun">UFO-50&lt;/a> games and make a fun project.&lt;/p>
&lt;p>The list of games that the jam is targeting is:&lt;/p>
&lt;ul>
&lt;li>Devilition&lt;/li>
&lt;li>Kick Club&lt;/li>
&lt;li>&lt;strong>Avianos&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Mooncat&lt;/strong>&lt;/li>
&lt;li>Bushido Ball&lt;/li>
&lt;li>Block Koala&lt;/li>
&lt;li>Camouflage&lt;/li>
&lt;li>Campanella&lt;/li>
&lt;li>Golfaria&lt;/li>
&lt;li>The Big Bell Race&lt;/li>
&lt;li>Warptank&lt;/li>
&lt;li>Waldorf&amp;rsquo;s Journey&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>I really liked &lt;strong>Mooncat&lt;/strong> and thought of making a game that takes heavy inspiration from it&amp;rsquo;s controls.&lt;/p>
&lt;p>I don&amp;rsquo;t really remember when or how I thought of it, but I thought of &lt;strong>Sundog&lt;/strong> would be a cool name for a game since it flips &lt;em>moon&lt;/em> and &lt;em>cat&lt;/em>.&lt;/p>
&lt;p>The idea is, you&amp;rsquo;re a hotdog, escaping a hotdog cart.
The controls are like &lt;strong>Mooncat&lt;/strong>, where inputs on the right make your character go right, and the inputs on the left make them go left.&lt;/p>
&lt;p>I voiced the plan on Discord, and &lt;code>epiblitikos&lt;/code> came up with this great idea:
&amp;ldquo;For some reason this hot dog wants to go to the beach: hence sundog&amp;rdquo;&lt;/p>
&lt;p>I &lt;strong>love&lt;/strong> this idea.&lt;/p>
&lt;p>I think the &amp;lsquo;some reason&amp;rsquo; will be a love interest (classic), and will be a cheeseburger, a hotdog, or some other type of fast food.&lt;/p>
&lt;p>I&amp;rsquo;m thinking through a bit of a twist at the end, but don&amp;rsquo;t want to share it here.&lt;/p></description></item></channel></rss>